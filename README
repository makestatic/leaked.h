 							LEAKED.H
thread-safe memory bug catcher for C (C89+).  it tracks allocations and
frees, warns on invalid or double frees, and reports leaks at program exit
(it handle crash).  also it works across multiple files with a single global
tracker and colored output enabled by default.

Copyright (c) 2023, Ali Almalki, All rights reserved. BSD-3-Clause.

USAGE:
    // main.c
    #define LEAKED_IMPLEMENTATION
    #include "leaked.h"

    int main(void)
    {
        leaked_init();           // call once at program start
		...
		return 0;
  	}



OUTPUT EXAMPLE:
	[LEAKED] invalid free at 0x30000332a0 (main.c:42)
	[LEAKED] 1 alloc(s) 42 bytes at 0x30000332a0 (main.c:69)
	[LEAKED] 1 alloc(s) 20 bytes at 0x30000332a0 (main.c:420)
	[LEAKED] total (2) leaks, (62) bytes

NOTES:
	- ‘#define LEAKED_IMPLEMENTATION’ in one .c file only (e.g main.c)
	  include normally in other files
	- minimal overhead, intended for debugging only
	- enable thread-safety with: #define LEAKED_THREAD_SAFE
	- disable colors with: #define LEAKED_NO_COLOR

