

                       LEAKED.H                        
Simple memory leak detector for C. It tracks
allocations/frees, warns on double frees/invalid use,
and shows memory alive and leaks at program exit.
Also supports multi-file projects with a single global tracker.
                                                                
Copyright (c) 2023, Ali Almalki, All rights reserved.
              (BSD-3-Clause)


                        USAGE:
// main.c :

    #define LEAKED_IMPLEMENTATION
    #include "leaked.h"
    
    int main(void)
    {
        leaked_init();         // call once at start
    
        int* a = malloc(10);   // tracked
        int* b = calloc(5, 1); // tracked
        a = realloc(a, 20);    // tracked
    
        free(b);               // free 'b'
        free(b);               // double-free !
    
        // forgot to free 'a' !
    
        return 0;
    }


                    OUTPUT EXAMPLE:
[WARN] invalid free 0x3000022300 at main.c:13
Leaked allocations:
  1) ptr=0x30000222a0 size=20 allocated at main.c:10 (realloc)
Total leaked: 20 bytes in 1 allocation


                        NOTES:
- C17+
- DEFINE ‘LEAKED_IMPLEMENTATION’ IN ONE '.c' FILE ONLY (e.g ‘main.c’),
  INCLUDE NORMALLY IN OTHER FILES
- MINIMAL OVERHEAD, INTENDED FOR DEBUGGING ONLY
